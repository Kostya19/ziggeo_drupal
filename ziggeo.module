<?php

/**
 * @file
 * Provides a Ziggeo field type.
 *
 * Provides a Ziggeo field type that allows you record and playback videos using
 * Ziggeo Video API.
 */

/**
 * Implements hook_help().
 */
function ziggeo_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ziggeo':
      // Return a line-break version of the module README.txt.
      return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * Defining Custom Ziggeo Field Type.
 */

/**
 * Implements hook_field_info().
 */
function ziggeo_field_info() {
  return array(
    'ziggeo_field' => array(
      'label' => t('Ziggeo Field'),
      'description' => t('Ziggeo Field'),
      'settings' => array(
        'application_token' => '',
        'private_key' => '',
        'encryption_key' => '',
      ),
      'default_widget' => 'ziggeo_recorder',
      'default_formatter' => 'ziggeo_player',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function ziggeo_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $register_url = 'https://ziggeo.com/signup?track=drupal';
  $form['ziggeo_field_settings_instructions'] = array(
    '#type' => 'item',
    '#markup' => t('You can see this settings in your Ziggeo account: choose or create an application, then select "Overview" item. If you don\'t have Ziggeo account, please <a href="@register_link" target="_blank">register</a>.', array('@register_link' => $register_url)),
  );
  $form['application_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Application Token'),
    '#default_value' => $settings['application_token'],
    '#required' => TRUE,
    '#description' => t('You can see this keys in Application Overview on your account on ziggeo.com'),
  );
  $form['private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private Key'),
    '#default_value' => $settings['private_key'],
    '#required' => TRUE,
  );
  $form['encryption_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Encryption Key'),
    '#default_value' => $settings['encryption_key'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implements hook_field_is_empty().
 */
function ziggeo_field_is_empty($item, $field) {
  $temp = array_keys($field['columns']);
  $key = array_shift($temp);
  return empty($item[$key]);
}

/**
 * Implements hook_field_presave().
 */
function ziggeo_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $field_name = $field['field_name'];
  $revision_key = entity_get_info($entity_type)['entity keys']['revision'];
  $new_items = array_column($items, 'token');
  $old_langcode = $langcode;
  $is_add_revision = isset($entity->revision) && $entity->revision == 1;
  $is_revert_revision = $is_add_revision && $entity->$revision_key != $entity->original->$revision_key;
  $is_add_entity_of_translation = !isset($entity->original) && isset($entity->translation_source);
  $is_translatable_field = isset($field['translatable']) && $field['translatable'] == 1;
  $is_add_delete_translatable_field = !isset($entity->original) && entity_extract_ids($entity_type, $entity)[0] !== NULL;
  define('ZIGGEO_ADD_TRANSLATABLE_FIELD', 1);
  define('ZIGGEO_DELETE_TRANSLATABLE_FIELD', 2);
  $field_language_to_add = (
      isset($entity->original->$field_name) &&
      isset($entity->original->language) &&
      isset($entity->{$field_name}[$entity->original->language]) &&
      $entity->{$field_name}[$entity->original->language] != array()
      ) ? array_diff_key($entity->$field_name, $entity->original->$field_name) : array();
  $is_change_field_language = $is_translatable_field && isset($entity->original) && $entity->language != $entity->original->language;

  $old_items = array();
  if (isset($entity->original) && !empty($entity->original->$field_name)) {
    if ($is_change_field_language || !empty($field_language_to_add)) {
      $old_langcode = $entity->original->language;
    }
    $old_items_field = $entity->original->$field_name;

    $is_delete_field_translation = isset($old_items_field[$langcode]) && $old_items_field[$langcode] === array();
    if ($is_delete_field_translation) {
      $entity_key = entity_extract_ids($entity_type, $entity)[0];
      $entity_database = entity_load($entity_type, array($entity_key));
      $old_items_field = $entity_database[$entity_key]->$field_name;
    }

    if (isset($old_items_field[$old_langcode])) {
      $old_items = array_column($old_items_field[$old_langcode], 'token');
    }
  }
  if ($is_add_entity_of_translation && !empty($entity->translation_source->$field_name)) {
    $old_items_field = $entity->translation_source->$field_name;
    $old_items = array_column($old_items_field[$langcode], 'token');
  }
  if ($is_revert_revision) {
    $old_items = $new_items;
  }

  if ($is_add_delete_translatable_field) {
    if ($is_translatable_field) {
      $select_translations_database = db_select('field_data_' . $field_name, 'f')
        ->fields('f', array('language'))
        ->condition('entity_id', entity_extract_ids($entity_type, $entity)[0])
        ->execute()
        ->fetchCol();
      $entity_translations_database = array_flip($select_translations_database);
      if (array_intersect_key($entity->translations->data, $entity_translations_database) == $entity->translations->data &&
          isset($entity->{$field_name}[LANGUAGE_NONE]) && !empty($entity->{$field_name}[LANGUAGE_NONE])) {
        $add_delete_translatable_field = ZIGGEO_DELETE_TRANSLATABLE_FIELD;
      }
      else {
        // Add translatable field or delete empty fields.
        $add_delete_translatable_field = ZIGGEO_ADD_TRANSLATABLE_FIELD;
      }

      if ($add_delete_translatable_field == ZIGGEO_ADD_TRANSLATABLE_FIELD) {
        $new_translations_items_field = array_intersect_key($entity->$field_name, $entity->translations->data);
        $new_items_field = isset($new_translations_items_field[$langcode]) ? $new_translations_items_field[$langcode] : array();
        $old_translations_items_field = isset($entity->{$field_name}[$entity->translations->original]) ? array_intersect_key($entity->$field_name, array_flip(array($entity->translations->original))) : array();
        $old_items_field = isset($old_translations_items_field[$langcode]) ? $old_translations_items_field[$langcode] : array();
        $field_language_to_add = array_diff_key($new_translations_items_field, $old_translations_items_field);
      }
      elseif ($add_delete_translatable_field == ZIGGEO_DELETE_TRANSLATABLE_FIELD) {
        $new_translations_items_field = isset($entity->{$field_name}[$entity->translations->original]) ? array_intersect_key($entity->$field_name, array_flip(array($entity->translations->original))) : array();
        $new_items_field = isset($new_translations_items_field[$langcode]) ? $new_translations_items_field[$langcode] : array();
        $old_translations_items_field = array_intersect_key($entity->$field_name, $entity->translations->data);
        $old_items_field = isset($old_translations_items_field[$langcode]) ? $old_translations_items_field[$langcode] : array();
      }
      $new_items = array_column($new_items_field, 'token');
      $old_items = array_column($old_items_field, 'token');
    }
    else {
      $old_translations_items_field = $entity->$field_name;
      $old_items_field = isset($old_translations_items_field[$langcode]) ? $old_translations_items_field[$langcode] : array();
      $old_items = array_column($old_items_field, 'token');
    }
  }

  $is_add_translation = $is_add_entity_of_translation || !empty($field_language_to_add);

  // Delete all videos that not exists in new version of field (that deleted or
  // replaced) and remove "temporary" attribute for new video
  // if not creating a new revision and not new language.
  if (!$is_add_revision && !$is_add_translation &&
      !($is_change_field_language && $langcode != $entity->language)) {
    $ziggeo = ziggeo_get_ziggeo_object($field_name);
    $items_for_delete = $old_items;
    foreach ($new_items as $delta => $item) {
      if (in_array($item, $old_items)) {
        // If video in new version of field exists in old version of field, then
        // not delete and nothing to do.
        unset($items_for_delete[array_search($item, $items_for_delete)]);
      }
      else {
        // If video in new version of field is new, then remove "temporary"
        // attribute.
        ziggeo_remove_temporary_attribute($ziggeo, $item);
      }
    }
    // Delete all videos that not exists in new version of field (that deleted
    // or replaced) if not exist in others revisions and not exist in others
    // languages. Checking contained video in other revisions does not make
    // sense, since makes a copy of the video when create revision.
    // But it remains for to be on the safe side.
    foreach ($items_for_delete as $item_for_delete) {
      if (!ziggeo_field_is_contained_item_in_revisions($entity_type, $entity, $field, $langcode, $item_for_delete) &&
          !ziggeo_field_is_contained_item_in_translations($entity_type, $entity, $field, $langcode, $item_for_delete) &&
          !ziggeo_field_is_contained_item_in_default($entity_type, $entity, $field, $instance, $langcode, $item_for_delete)) {
        ziggeo_delete_server_video($ziggeo, $item_for_delete);
      }
    }
  }

  // Create copy of the video when created new revision or new translation
  // if was not created a new video with a new token.
  if ($is_add_revision ||
      isset($field_language_to_add[$langcode]) ||
      $is_add_entity_of_translation) {
    $ziggeo = ziggeo_get_ziggeo_object($field_name);
    foreach ($new_items as $delta => $new_item) {
      if (in_array($new_item, $old_items) ||
          ($is_add_delete_translatable_field && $add_delete_translatable_field == ZIGGEO_ADD_TRANSLATABLE_FIELD &&
          array_column($entity->{$field_name}[$entity->translations->original], 'token') == array_column($entity->{$field_name}[$langcode], 'token'))) {
        $duplicate_video_token = ziggeo_duplicate_server_video($ziggeo, $new_item);
        if ($duplicate_video_token !== NULL) {
          $items[$delta]['token'] = $duplicate_video_token;
        }
        else {
          unset($items[$delta]);
        }
      }
      else {
        // If video in new revision is new, then remove "temporary" attribute.
        ziggeo_remove_temporary_attribute($ziggeo, $new_item);
      }
    }
  }
}

/**
 * Implements hook_field_delete().
 */
function ziggeo_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $ziggeo = ziggeo_get_ziggeo_object($field['field_name']);
  foreach ($items as $item) {
    $video_token = $item['token'];
    if (!ziggeo_field_is_contained_item_in_default($entity_type, $entity, $field, $instance, $langcode, $video_token)) {
      ziggeo_delete_server_video($ziggeo, $video_token);
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function ziggeo_entity_delete($entity, $entity_type) {
  // Find out revisions of deleting entity.
  $revision_list = ziggeo_get_entity_revision_list($entity_type, $entity);
  $revision_key = entity_get_info($entity_type)['entity keys']['revision'];
  if ($revision_key &&
      isset($entity->$revision_key) &&
      isset($revision_list[$entity->$revision_key])) {
    unset($revision_list[$entity->$revision_key]);
  }
  // Find out ziggeo fields of deleting entity.
  $bundle_name = isset($entity->type) ? $entity->type : NULL;
  $entity_fields = field_info_instances($entity_type, $bundle_name);
  $ziggeo_fields = array();
  foreach ($entity_fields as $field_name => $field_info) {
    if (isset($field_info['widget']['module']) &&
        $field_info['widget']['module'] == 'ziggeo') {
      $ziggeo_fields[] = $field_name;
    }
  }

  // Delete from ziggeo server videos of revisions,
  // because when deleting entity do not running hook_field_delete_revision().
  foreach ($revision_list as $revision_info) {
    $revision = entity_load($entity_type, array(), array($revision_key => $revision_info->$revision_key));
    $revision = reset($revision);
    foreach ($ziggeo_fields as $field_name) {
      $ziggeo = ziggeo_get_ziggeo_object($field_name);
      foreach ($revision->$field_name as $items) {
        foreach ($items as $item) {
          if (!ziggeo_field_is_contained_item_in_default($entity_type, $entity, $entity_fields[$field_name], $entity_fields[$field_name], NULL, $item['token'])) {
            ziggeo_delete_server_video($ziggeo, $item['token']);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_delete_revision().
 */
function ziggeo_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$deleted_revision_items) {
  $ziggeo = ziggeo_get_ziggeo_object($field['field_name']);

  // Do not remove the video if it is contained in others revisions.
  // Checking contained video in other revisions does not make sense, since
  // makes a copy of the video when create revision. But it remains for to be on
  // the safe side.
  foreach ($deleted_revision_items as $deleted_revision_item) {
    if (!ziggeo_field_is_contained_item_in_revisions($entity_type, $entity, $field, $langcode, $deleted_revision_item['token']) &&
        !ziggeo_field_is_contained_item_in_default($entity_type, $entity, $field, $instance, $langcode, $deleted_revision_item['token'])) {
      ziggeo_delete_server_video($ziggeo, $deleted_revision_item['token']);
    }
  }
}

/**
 * Defining Widget for Ziggeo Field Type.
 */

/**
 * Implements hook_field_widget_info().
 */
function ziggeo_field_widget_info() {
  return array(
    'ziggeo_recorder' => array(
      'label' => t('Ziggeo Recorder'),
      'field types' => array('ziggeo_field'),
      'settings' => array(
        'widget_type' => 'record_upload',
        'embedding_size_fieldset' => array(
          'embedding_size' => '320x240',
          'embedding_width' => 320,
          'embedding_height' => 240,
        ),
        'recording_resolution_fieldset' => array(
          'video_resolution' => '640x480',
          'recording_width' => 640,
          'recording_height' => 480,
        ),
        'disable_snapshots' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function ziggeo_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $form = array();

  $form['widget_type'] = array(
    '#type' => 'select',
    '#title' => t('Widget type'),
    '#options' => array(
      'record' => t('Record'),
      'upload' => t('Upload'),
      'record_upload' => t('Record & Upload'),
    ),
    '#default_value' => $settings['widget_type'],
    '#required' => TRUE,
  );

  $form['embedding_size_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Size of the embedding'),
    '#description' => t('This only changes the size of the embedding on your page - how much space it takes on the page. It will however not impact the resolution of your video(s).'),
  );
  $form['embedding_size_fieldset']['embedding_size'] = array(
    '#type' => 'select',
    '#default_value' => $settings['embedding_size_fieldset']['embedding_size'],
    '#options' => array(
      '240x180' => t('240x180 - SD (4:3)'),
      '320x240' => t('320x240 - SD (4:3)'),
      '480x360' => t('480x360 - SD (4:3)'),
      '640x480' => t('640x480 - SD (4:3)'),
      '240x135' => t('240x135 - HD (16:9)'),
      '320x180' => t('320x180 - HD (16:9)'),
      '480x270' => t('480x270 - HD (16:9)'),
      '720x405' => t('720x405 - HD (16:9)'),
      'custom' => t('Custom size'),
      'responsive' => t('Embedding maximizes to the size of the bounding box'),
    ),
    '#ajax' => array(
      'callback' => 'ziggeo_widget_select_embedding_size_ajax_callback',
      'wrapper' => 'embedding-size-width-height',
      'method' => 'replace',
    ),
  );
  if ($settings['embedding_size_fieldset']['embedding_size'] == 'custom') {
    $embedding_width = $settings['embedding_size_fieldset']['embedding_width'];
    $embedding_height = $settings['embedding_size_fieldset']['embedding_height'];
    $embedding_attributes = array();
  }
  elseif ($settings['embedding_size_fieldset']['embedding_size'] == 'responsive') {
    $embedding_width = '';
    $embedding_height = '';
    $embedding_attributes = array('disabled' => 'disabled');
  }
  else {
    $selected_size_array = explode('x', $settings['embedding_size_fieldset']['embedding_size']);
    $embedding_width = $selected_size_array[0];
    $embedding_height = $selected_size_array[1];
    $embedding_attributes = array('disabled' => 'disabled');
  }
  $form['embedding_size_fieldset']['embedding_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#prefix' => '<div id="embedding-size-width-height">',
    '#field_suffix' => 'px',
    '#default_value' => $embedding_width,
    '#size' => 4,
    '#maxlength' => 4,
    '#attributes' => $embedding_attributes,
  );
  $form['embedding_size_fieldset']['embedding_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#suffix' => '</div>',
    '#field_suffix' => 'px',
    '#default_value' => $embedding_height,
    '#size' => 4,
    '#maxlength' => 4,
    '#attributes' => $embedding_attributes,
  );

  $form['recording_resolution_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Video Recording Resolution'),
    '#description' => t('This changes recorder_width and recorder_height parameters in Ziggeo. It does not impact the end video resolution. To change that you would need to change default video profile within Ziggeo dashboard.'),
  );
  $form['recording_resolution_fieldset']['video_resolution'] = array(
    '#type' => 'select',
    '#default_value' => $settings['recording_resolution_fieldset']['video_resolution'],
    '#options' => array(
      '320x240' => t('320x240 - SD Medium Quality (4:3)'),
      '640x480' => t('640x480 - SD Good Quality (4:3)'),
      '960x720' => t('960x720 - SD High Quality (4:3)'),
      '320x180' => t('320x180 - HD Medium Quality (16:9)'),
      '720x405' => t('720x405 - HD Good Quality (16:9)'),
      '1280x720' => t('1280x720 - HD High Quality (16:9)'),
      'custom' => t('Custom resolution'),
    ),
    '#ajax' => array(
      'callback' => 'ziggeo_widget_select_recording_resolution_ajax_callback',
      'wrapper' => 'recording-resolution-width-height',
      'method' => 'replace',
    ),
  );
  if ($settings['recording_resolution_fieldset']['video_resolution'] == 'custom') {
    $recording_width = $settings['recording_resolution_fieldset']['recording_width'];
    $recording_height = $settings['recording_resolution_fieldset']['recording_height'];
    $recording_attributes = array();
  }
  else {
    $selected_resolution_array = explode('x', $settings['recording_resolution_fieldset']['video_resolution']);
    $recording_width = $selected_resolution_array[0];
    $recording_height = $selected_resolution_array[1];
    $recording_attributes = array('disabled' => 'disabled');
  }
  $form['recording_resolution_fieldset']['recording_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#prefix' => '<div id="recording-resolution-width-height">',
    '#field_suffix' => 'px',
    '#default_value' => $recording_width,
    '#size' => 4,
    '#maxlength' => 4,
    '#attributes' => $recording_attributes,
  );
  $form['recording_resolution_fieldset']['recording_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#suffix' => '</div>',
    '#field_suffix' => 'px',
    '#default_value' => $recording_height,
    '#size' => 4,
    '#maxlength' => 4,
    '#attributes' => $recording_attributes,
  );

  $form['disable_snapshots'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable selection of snapshots'),
    '#default_value' => $settings['disable_snapshots'],
  );

  return $form;
}

/**
 * AJAX callback for select element of the Size of the embedding.
 */
function ziggeo_widget_select_embedding_size_ajax_callback(&$form, &$form_state) {
  $selected_size = $form_state['triggering_element']['#value'];
  if ($selected_size == 'custom') {
    unset($form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_width']['#attributes']['disabled']);
    unset($form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_height']['#attributes']['disabled']);
    $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_width']['#value'] = '';
    $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_height']['#value'] = '';
  }
  elseif ($selected_size == 'responsive') {
    $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_width']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_height']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_width']['#value'] = '';
    $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_height']['#value'] = '';
  }
  else {
    $selected_size_array = explode('x', $selected_size);
    $width = $selected_size_array[0];
    $height = $selected_size_array[1];
    $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_width']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_height']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_width']['#value'] = $width;
    $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_height']['#value'] = $height;
  }
  $elements = array();
  $elements['embedding_width'] = $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_width'];
  $elements['embedding_height'] = $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_height'];

  return $elements;
}

/**
 * AJAX callback for select element of the Video Recording Resolution.
 */
function ziggeo_widget_select_recording_resolution_ajax_callback(&$form, &$form_state) {
  $selected_resolution = $form_state['triggering_element']['#value'];
  if ($selected_resolution == 'custom') {
    unset($form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_width']['#attributes']['disabled']);
    unset($form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_height']['#attributes']['disabled']);
    $form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_width']['#value'] = '';
    $form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_height']['#value'] = '';
  }
  else {
    $selected_resolution_array = explode('x', $selected_resolution);
    $width = $selected_resolution_array[0];
    $height = $selected_resolution_array[1];
    $form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_width']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_height']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_width']['#value'] = $width;
    $form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_height']['#value'] = $height;
  }
  $elements = array();
  $elements['recording_width'] = $form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_width'];
  $elements['recording_height'] = $form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_height'];

  return $elements;
}

/**
 * Form validation handler for widget settings form.
 */
function ziggeo_field_widget_settings_form_validate(&$form, &$form_state) {
  $settings = $form_state['values']['instance']['widget']['settings'];

  // Check match Size of the embedding and Video Recording resolution.
  $fields_to_validate = array(
    'embedding_size',
    'video_resolution',
  );
  if ((isset($form_state['triggering_element']['#parents'][4]) &&
      in_array($form_state['triggering_element']['#parents'][4], $fields_to_validate)) ||
      (isset($form_state['triggering_element']['#parents'][0]) &&
      $form_state['triggering_element']['#parents'][0] == 'submit')) {
    if ($settings['embedding_size_fieldset']['embedding_size'] == 'custom') {
      unset($form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_width']['#attributes']['disabled']);
      unset($form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_height']['#attributes']['disabled']);
      $embedding_width = $settings['embedding_size_fieldset']['embedding_width'];
      $embedding_height = $settings['embedding_size_fieldset']['embedding_height'];
    }
    else {
      $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_width']['#attributes']['disabled'] = array('disabled' => 'disabled');
      $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_height']['#attributes']['disabled'] = array('disabled' => 'disabled');
      if ($settings['embedding_size_fieldset']['embedding_size'] == 'responsive') {
        $embedding_width = '';
        $embedding_height = '';
      }
      else {
        $selected_size_array = explode('x', $settings['embedding_size_fieldset']['embedding_size']);
        $embedding_width = $selected_size_array[0];
        $embedding_height = $selected_size_array[1];
      }
      $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_width']['#value'] = $embedding_width;
      $form['instance']['widget']['settings']['embedding_size_fieldset']['embedding_height']['#value'] = $embedding_height;
    }

    if ($settings['recording_resolution_fieldset']['video_resolution'] == 'custom') {
      unset($form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_width']['#attributes']['disabled']);
      unset($form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_height']['#attributes']['disabled']);
      $recording_width = $settings['recording_resolution_fieldset']['recording_width'];
      $recording_height = $settings['recording_resolution_fieldset']['recording_height'];
    }
    else {
      $form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_width']['#attributes']['disabled'] = array('disabled' => 'disabled');
      $form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_height']['#attributes']['disabled'] = array('disabled' => 'disabled');
      $selected_resolution_array = explode('x', $settings['recording_resolution_fieldset']['video_resolution']);
      $recording_width = $selected_resolution_array[0];
      $recording_height = $selected_resolution_array[1];
      $form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_width']['#value'] = $recording_width;
      $form['instance']['widget']['settings']['recording_resolution_fieldset']['recording_height']['#value'] = $recording_height;
    }

    if ((isset($form_state['triggering_element']['#parents'][0]) &&
        $form_state['triggering_element']['#parents'][0] == 'submit' &&
        $embedding_width != '' &&
        $embedding_height != '' &&
        $recording_width != '' &&
        $recording_height != '') ||
        ($settings['embedding_size_fieldset']['embedding_size'] != 'custom' &&
        $settings['recording_resolution_fieldset']['video_resolution'] != 'custom') &&
        $settings['embedding_size_fieldset']['embedding_size'] != 'responsive') {
      $embedding_ratio = round($embedding_width / $embedding_height, 5);
      $recording_ratio = round($recording_width / $recording_height, 5);
      if ($embedding_ratio <> $recording_ratio) {
        drupal_set_message(t('Ratio of the Embedding not match Video Recording ratio.'), 'warning');
      }
      if ($embedding_width > $recording_width ||
          $embedding_height > $recording_height) {
        drupal_set_message(t('Size of the embedding is larger than Video Recording resolution.'), 'warning');
      }
    }
  }

  // Check filling Width and Height.
  if ($settings['embedding_size_fieldset']['embedding_size'] == 'custom') {
    if ($settings['embedding_size_fieldset']['embedding_width'] == '') {
      form_set_error('instance][widget][settings][embedding_size_fieldset][embedding_width', t('Width field is required for custom size of the embedding.'));
    }
    if ($settings['embedding_size_fieldset']['embedding_height'] == '') {
      form_set_error('instance][widget][settings][embedding_size_fieldset][embedding_height', t('Height field is required for custom size of the embedding.'));
    }
  }
  if ($settings['recording_resolution_fieldset']['video_resolution'] == 'custom') {
    if ($settings['recording_resolution_fieldset']['recording_width'] == '') {
      form_set_error('instance][widget][settings][recording_resolution_fieldset][recording_width', t('Width field is required for custom video recording resolution.'));
    }
    if ($settings['recording_resolution_fieldset']['recording_height'] == '') {
      form_set_error('instance][widget][settings][recording_resolution_fieldset][recording_height', t('Height field is required for custom video recording resolution.'));
    }
  }
}

/**
 * Form submit handler for widget settings form.
 */
function ziggeo_field_widget_settings_form_submit(&$form, &$form_state) {
  // Work with default field value: delete from server or remove "temporary"
  // attribute for new video.
  $field_name = $form['#instance']['field_name'];
  $old_default_value = isset($form['#instance']['default_value']) ? $form['#instance']['default_value']['0']['token'] : '';
  $new_default_value = $form_state['values'][$field_name];
  $new_default_value = reset($new_default_value);
  $new_default_value = reset($new_default_value);
  $new_default_value = $new_default_value['token'];
  if ($old_default_value == '' && $new_default_value != '') {
    $ziggeo = ziggeo_get_ziggeo_object($field_name);
    ziggeo_remove_temporary_attribute($ziggeo, $new_default_value);
  }
  if ($old_default_value != '' && $new_default_value == '') {
    // TODO: Delete $old_default_value if it is not in the entities.
  }
  if ($old_default_value != '' && $new_default_value != '' && $old_default_value != $new_default_value) {
    $ziggeo = ziggeo_get_ziggeo_object($field_name);
    ziggeo_remove_temporary_attribute($ziggeo, $new_default_value);
    // TODO: Delete $old_default_value if it is not in the entities.
  }
}

/**
 * Implements hook_field_widget_form().
 */
function ziggeo_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if (!isset($form['#validate']) ||
      !in_array('ziggeo_field_widget_form_validate', $form['#validate'])) {
    $form['#validate'][] = 'ziggeo_field_widget_form_validate';
  }
  // If remove_button pressed, delete video from form.
  if (isset($form_state['triggering_element']['#parents'][3]) &&
      $form_state['triggering_element']['#parents'][3] == 'ziggeo_remove_button') {
    $triggering_element_name = $form_state['triggering_element']['#parents'][0];
    $triggering_element_language = $form_state['triggering_element']['#parents'][1];
    $triggering_element_delta = $form_state['triggering_element']['#parents'][2];
    $value = isset($form_state['values'][$field['field_name']][$langcode][$delta]) ? $form_state['values'][$field['field_name']][$langcode][$delta]['token'] : NULL;

    if ($value &&
        $triggering_element_name == $field['field_name'] &&
        $triggering_element_language == $langcode &&
        $triggering_element_delta == $delta) {
      $items[$delta] = NULL;
      $form_state['values'][$field['field_name']][$langcode][$delta]['token'] = '';
    }
  }

  $widget_settings = $form_state['field'][$instance['field_name']][$langcode]['instance']['widget']['settings'];
  if ($widget_settings['embedding_size_fieldset']['embedding_size'] == 'custom') {
    $embedding_width = $widget_settings['embedding_size_fieldset']['embedding_width'];
    $embedding_height = $widget_settings['embedding_size_fieldset']['embedding_height'];
  }
  elseif ($widget_settings['embedding_size_fieldset']['embedding_size'] == 'responsive') {
    $embedding_width = '';
    $embedding_height = '';
  }
  else {
    $selected_size_array = explode('x', $widget_settings['embedding_size_fieldset']['embedding_size']);
    $embedding_width = $selected_size_array[0];
    $embedding_height = $selected_size_array[1];
  }

  if ($widget_settings['recording_resolution_fieldset']['video_resolution'] == 'custom') {
    $recording_width = $widget_settings['recording_resolution_fieldset']['recording_width'];
    $recording_height = $widget_settings['recording_resolution_fieldset']['recording_height'];
  }
  else {
    $selected_resolution_array = explode('x', $widget_settings['recording_resolution_fieldset']['video_resolution']);
    $recording_width = $selected_resolution_array[0];
    $recording_height = $selected_resolution_array[1];
  }

  $field_settings = $field['settings'];
  $widget_type = isset($widget_settings['widget_type']) ? $widget_settings['widget_type'] : 'record_upload';

  global $language;
  $widget_language = ziggeo_drupal_language_map($language->language);

  $item_value = isset($items[$delta]) ? $items[$delta] : '';
  $input_value = (isset($form_state['values'][$field['field_name']][$langcode][$delta]['token'])) ? $form_state['values'][$field['field_name']][$langcode][$delta] : '';
  $value = ($input_value != '') ? $input_value : $item_value;
  $video_token = isset($value['token']) ? $value['token'] : '';
  $input_name = $element['#field_name'] . '[' . $element['#language'] . '][' . $delta . '][token]';

  $element['#attached'] = ziggeo_libraries($field_settings['application_token'], $widget_language);
  $element['#attached']['css'][drupal_get_path('module', 'ziggeo') . '/ziggeo_widget.css'] = array('weight' => 2);
  $element['#attached']['js'][] = drupal_get_path('module', 'ziggeo') . '/ziggeo_widget.js';

  $element += array(
    '#delta' => $delta,
  );

  // Creation of the ziggeo widget.
  $ziggeo_element = array(
    '#theme' => 'ziggeo_element',
    '#attributes' => array(
      'ziggeo-recording_width' => $recording_width,
      'ziggeo-recording_height' => $recording_height,
    ),
  );

  if ($widget_settings['embedding_size_fieldset']['embedding_size'] == 'responsive') {
    $ziggeo_element['#attributes']['ziggeo-responsive'] = '';
  }
  else {
    $ziggeo_element['#attributes']['ziggeo-width'] = $embedding_width;
    $ziggeo_element['#attributes']['ziggeo-height'] = $embedding_height;
  }

  if (empty($video_token)) {
    $ziggeo_element['#attributes']['ziggeo-input_bind'] = $input_name;
    $ziggeo_element['#attributes']['ziggeo-expiration_days'] = 1;
  }
  else {
    $ziggeo_element['#attributes']['ziggeo-video'] = $video_token;
    $ziggeo_element['#attributes']['ziggeo-modes'] = 'rerecorder';
  }

  switch ($widget_type) {
    case 'record':
      // No additional attributes.
      break;

    case 'upload':
      $ziggeo_element['#attributes']['ziggeo-perms'] = 'allowupload,forbidrecord';
      break;

    case 'record_upload':
      $ziggeo_element['#attributes']['ziggeo-perms'] = 'allowupload';
      break;
  }

  if ($widget_settings['disable_snapshots'] == TRUE) {
    $ziggeo_element['#attributes']['ziggeo-disable_snapshots'] = '';
  }

  $field_default_value = field_get_default_value($element['#entity_type'], $element['#entity'], $field, $instance, $langcode);
  if (!empty($field_default_value) && array_column($field_default_value, 'token') == array_column($items, 'token')) {
    $ziggeo_element['#is_default'] = TRUE;
  }

  $remove_button_caption = ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) ? 'Remove' : 'Reset';
  $ziggeo_element['#remove_button_caption'] = $remove_button_caption;

  $element_ziggeo_element = $element + array(
    '#type' => 'item',
    '#markup' => drupal_render($ziggeo_element),
  );
  $element_ziggeo_element['#weight'] = 0;

  $element_token = $element + array(
    '#type' => 'hidden',
    '#default_value' => $video_token,
    '#attributes' => array(
      'autocomplete' => 'off',
    ),
    '#delta' => $delta,
  );
  $element_token['#weight'] = 1;

  // Creation of remove button.
  $remove_button_element = array(
    '#theme' => 'ziggeo_remove_button',
    '#attributes' => array(
      'class' => array(
        'ziggeo-remove-button',
        'form-submit',
      ),
    ),
    '#value' => $remove_button_caption,
  );
  $remove_button_markup = drupal_render($remove_button_element);

  $element_ziggeo_remove_button = array(
    // Checkbox is used because submit buttons do not work as it should.
    '#type' => 'checkbox',
    '#attributes' => array(
      'class' => array('ziggeo-remove-checkbox'),
    ),
    '#ajax' => array(
      'callback' => 'ziggeo_remove_button_ajax_callback',
      'event' => 'mousedown',
    ),
    '#prefix' => $remove_button_markup,
  );
  $element_ziggeo_remove_button['#weight'] = 2;

  $element['ziggeo_element'] = $element_ziggeo_element;
  $element['token'] = $element_token;
  $element['ziggeo_remove_button'] = $element_ziggeo_remove_button;

  return $element;
}

/**
 * Form validation handler for forms where is ziggeo widget.
 */
function ziggeo_field_widget_form_validate(&$form, &$form_state) {
  // Rebuild ziggeo widgets for correct display, when validation is failed.
  if (form_get_errors()) {
    $new_form = drupal_rebuild_form($form['#form_id'], $form_state, $form);
    foreach ($form_state['field'] as $field_name => $field_languages) {
      foreach ($field_languages as $field_language => $field_info) {
        if ($field_info['field']['module'] == 'ziggeo') {
          foreach ($form_state['values'][$field_name][$field_language] as $delta => $values) {
            $form[$field_name][$field_language][$delta] = $new_form[$field_name][$field_language][$delta];
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function ziggeo_form_alter(&$form, &$form_state, $form_id) {
  // If remove_button pressed, delete from form.
  if (isset($form_state['triggering_element']['#parents'][3]) &&
      $form_state['triggering_element']['#parents'][3] == 'ziggeo_remove_button') {
    $field_name = $form_state['triggering_element']['#parents'][0];
    $field_language = $form_state['triggering_element']['#parents'][1];
    $field_delta = $form_state['triggering_element']['#parents'][2];
    $form['#ziggeo_remove_button'] = array(
      'wrapper' => $form[$field_name]['#attributes']['class'][1],
      'field_name' => $field_name,
      'field_language' => $field_language,
    );

    $items_count = ziggeo_calc_unlimfield_count($form[$field_name][$field_language]);
    if ($items_count > 1) {
      if ($form[$field_name][$field_language]['#cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
        // Remove field item.
        unset($form[$field_name][$field_language][$field_delta]);

        if (!isset($form_state['#ziggeo_remove_button'])) {
          $form_state['#ziggeo_remove_button'] = array();
        }
        // Memorize this removal.
        $form_state['#ziggeo_remove_button'][$field_name][$field_language][] = $field_delta;
      }
    }
  }

  // Remove all items again in case the form submission fails validation.
  if (!empty($form_state['#ziggeo_remove_button'])) {
    foreach ($form_state['#ziggeo_remove_button'] as $field_name => $field_values) {
      foreach ($field_values as $field_language => $field_deltas) {
        foreach ($field_deltas as $field_delta) {
          if (isset($form[$field_name][$field_language][$field_delta])) {
            unset($form[$field_name][$field_language][$field_delta]);
          }
        }
      }
    }
  }

  // Add validate and submit function for widget settings form.
  if (isset($form['instance']['widget']['module']['#value']) &&
      $form['instance']['widget']['module']['#value'] == 'ziggeo') {
    $form['#validate'][] = 'ziggeo_field_widget_settings_form_validate';
    $form['#submit'][] = 'ziggeo_field_widget_settings_form_submit';
  }
  // Add validate function for formatter settings form.
  if ($form['#form_id'] == 'field_ui_display_overview_form' &&
      isset($form_state['triggering_element']['#parents'][1]) &&
      $form_state['triggering_element']['#parents'][0] == 'fields' &&
      field_info_field($form_state['triggering_element']['#parents'][1])['module'] == 'ziggeo') {
    $form['fields'][$form_state['triggering_element']['#parents'][1]]['#element_validate'][] = 'ziggeo_field_formatter_settings_form_validate';
  }
}

/**
 * AJAX callback function for Remove button.
 */
function ziggeo_remove_button_ajax_callback(&$form, $form_state) {
  $wrapper = '.' . $form['#ziggeo_remove_button']['wrapper'];
  $field_name = $form['#ziggeo_remove_button']['field_name'];
  $field_language = $form['#ziggeo_remove_button']['field_language'];

  $triggering_element_name = $form_state['triggering_element']['#parents'][0];
  $triggering_element_language = $form_state['triggering_element']['#parents'][1];
  $triggering_element_delta = $form_state['triggering_element']['#parents'][2];

  // Creation of empty ziggeo widget.
  $ziggeo_markup = isset($form[$triggering_element_name][$triggering_element_language][$triggering_element_delta]) ? $form[$triggering_element_name][$triggering_element_language][$triggering_element_delta]['ziggeo_element']['#markup'] : '';

  $commands = array();

  // Call JS function for reset widget (see ziggeo.js).
  $commands[] = array(
    'command' => 'ziggeo_reset_widget',
    'ziggeo_element_markup' => $ziggeo_markup,
  );

  // Remove from unlimited field.
  if ($form[$field_name][$field_language]['#cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    $items_count = ziggeo_calc_unlimfield_count($form[$field_name][$field_language]);
    if ($items_count >= 1) {
      $commands[] = ajax_command_replace($wrapper, render($form[$field_name]));
    }
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ziggeo_form_field_ui_field_overview_form_alter(&$form, &$form_state, $form_id) {
  // Detecting Ziggeo Fields with different Application Tokens.
  $application_tokens_array = array();
  foreach ($form['#fields'] as $field_name) {
    $field_info = field_info_field($field_name);
    if ($field_info['module'] == 'ziggeo') {
      $application_token = $field_info['settings']['application_token'];
      $application_tokens_array[$application_token] = NULL;
    }
  }
  if (count($application_tokens_array) > 1) {
    drupal_set_message(t('Detected several Ziggeo Fields with different Application Tokens. It will be use the Application of the field located below.'), 'warning');
  }
}

/**
 * Defining Formatters for Ziggeo Field Type.
 */

/**
 * Implements hook_field_formatter_info().
 */
function ziggeo_field_formatter_info() {
  return array(
    'ziggeo_player' => array(
      'label' => t('Ziggeo Player'),
      'field types' => array('ziggeo_field'),
      'settings' => array(
        'embedding_size' => '320x240',
        'embedding_width' => 320,
        'embedding_height' => 240,
        'open_in_popup' => FALSE,
        'popup_size' => '640x480',
        'popup_width' => 640,
        'popup_height' => 480,
      ),
    ),
    'ziggeo_image' => array(
      'label' => t('Ziggeo Image'),
      'field types' => array('ziggeo_field'),
      'settings' => array(
        'image_style' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ziggeo_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
    case 'ziggeo_player':
      $element['embedding_size'] = array(
        '#title' => t('Size of the embedding'),
        '#type' => 'select',
        '#default_value' => $settings['embedding_size'],
        '#options' => array(
          '240x180' => t('240x180 - SD (4:3)'),
          '320x240' => t('320x240 - SD (4:3)'),
          '480x360' => t('480x360 - SD (4:3)'),
          '640x480' => t('640x480 - SD (4:3)'),
          '240x135' => t('240x135 - HD (16:9)'),
          '320x180' => t('320x180 - HD (16:9)'),
          '480x270' => t('480x270 - HD (16:9)'),
          '720x405' => t('720x405 - HD (16:9)'),
          'custom' => t('Custom size'),
          'responsive' => t('Embedding maximizes to the size of the bounding box'),
        ),
        '#ajax' => array(
          'callback' => 'ziggeo_formatter_select_embedding_size_ajax_callback',
          'wrapper' => 'embedding-size-width-height',
          'method' => 'replace',
        ),
      );
      if ($settings['embedding_size'] == 'custom') {
        $embedding_width = $settings['embedding_width'];
        $embedding_height = $settings['embedding_height'];
        $embedding_attributes = array();
      }
      elseif ($settings['embedding_size'] == 'responsive') {
        $embedding_width = '';
        $embedding_height = '';
        $embedding_attributes = array('disabled' => 'disabled');
      }
      else {
        $selected_size_array = explode('x', $settings['embedding_size']);
        $embedding_width = $selected_size_array[0];
        $embedding_height = $selected_size_array[1];
        $embedding_attributes = array('disabled' => 'disabled');
      }
      $element['embedding_width'] = array(
        '#type' => 'textfield',
        '#title' => t('Width'),
        '#prefix' => '<div id="embedding-size-width-height">',
        '#field_suffix' => 'px',
        '#default_value' => $embedding_width,
        '#size' => 4,
        '#maxlength' => 4,
        '#attributes' => $embedding_attributes,
      );
      $element['embedding_height'] = array(
        '#type' => 'textfield',
        '#title' => t('Height'),
        '#suffix' => '</div>',
        '#field_suffix' => 'px',
        '#default_value' => $embedding_height,
        '#size' => 4,
        '#maxlength' => 4,
        '#attributes' => $embedding_attributes,
      );
      $element['open_in_popup'] = array(
        '#type' => 'checkbox',
        '#title' => t('Open in popup'),
        '#default_value' => $settings['open_in_popup'],
      );
      $element['popup_size'] = array(
        '#title' => t('Size of the popup'),
        '#type' => 'select',
        '#default_value' => $settings['popup_size'],
        '#options' => array(
          '480x360' => t('480x360 - SD (4:3)'),
          '640x480' => t('640x480 - SD (4:3)'),
          '800x600' => t('800x600 - SD (4:3)'),
          '1024x768' => t('1024x768 - SD (4:3)'),
          '480x270' => t('480x270 - HD (16:9)'),
          '720x405' => t('720x405 - HD (16:9)'),
          '960x540' => t('960x540 - HD (16:9)'),
          '1280x720' => t('1280x720 - HD (16:9)'),
          'custom' => t('Custom size'),
          'optimal' => t('Optimal size'),
        ),
        '#states' => array(
          'visible' => array(
            ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][open_in_popup]"]' => array(
              'checked' => TRUE,
            ),
          ),
        ),
        '#ajax' => array(
          'callback' => 'ziggeo_formatter_select_popup_size_ajax_callback',
          'wrapper' => 'popup-size-width-height',
          'method' => 'replace',
        ),
      );
      if ($settings['popup_size'] == 'custom') {
        $popup_width = $settings['popup_width'];
        $popup_height = $settings['popup_height'];
        $popup_attributes = array();
      }
      elseif ($settings['popup_size'] == 'optimal') {
        $popup_width = '';
        $popup_height = '';
        $popup_attributes = array('disabled' => 'disabled');
      }
      else {
        $selected_popup_size_array = explode('x', $settings['popup_size']);
        $popup_width = $selected_popup_size_array[0];
        $popup_height = $selected_popup_size_array[1];
        $popup_attributes = array('disabled' => 'disabled');
      }
      $element['popup_width'] = array(
        '#type' => 'textfield',
        '#title' => t('Popup width'),
        '#prefix' => '<div id="popup-size-width-height">',
        '#field_suffix' => 'px',
        '#default_value' => $popup_width,
        '#size' => 4,
        '#maxlength' => 4,
        '#attributes' => $popup_attributes,
        '#states' => array(
          'visible' => array(
            ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][open_in_popup]"]' => array(
              'checked' => TRUE,
            ),
          ),
        ),
      );
      $element['popup_height'] = array(
        '#type' => 'textfield',
        '#title' => t('Popup height'),
        '#suffix' => '</div>',
        '#field_suffix' => 'px',
        '#default_value' => $popup_height,
        '#size' => 4,
        '#maxlength' => 4,
        '#attributes' => $popup_attributes,
        '#states' => array(
          'visible' => array(
            ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][open_in_popup]"]' => array(
              'checked' => TRUE,
            ),
          ),
        ),
      );
      break;

    case 'ziggeo_image':
      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      $element['image_style'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );
      break;
  }
  return $element;
}

/**
 * AJAX callback for formatter embedding size select element.
 */
function ziggeo_formatter_select_embedding_size_ajax_callback(&$form, &$form_state) {
  $triggering_element = $form_state['triggering_element'];
  $selected_size = $triggering_element['#value'];
  $field_name = $triggering_element['#parents'][1];
  if ($selected_size == 'custom') {
    unset($form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_width']['#attributes']['disabled']);
    unset($form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_height']['#attributes']['disabled']);
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_width']['#value'] = '';
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_height']['#value'] = '';
  }
  elseif ($selected_size == 'responsive') {
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_width']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_height']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_width']['#value'] = '';
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_height']['#value'] = '';
  }
  else {
    $selected_size_array = explode('x', $selected_size);
    $width = $selected_size_array[0];
    $height = $selected_size_array[1];
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_width']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_height']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_width']['#value'] = $width;
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_height']['#value'] = $height;
  }
  $elements = array();
  $elements['embedding_width'] = $form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_width'];
  $elements['embedding_height'] = $form['fields'][$field_name]['format']['settings_edit_form']['settings']['embedding_height'];

  return $elements;
}

/**
 * AJAX callback for formatter popup size select element.
 */
function ziggeo_formatter_select_popup_size_ajax_callback(&$form, &$form_state) {
  $triggering_element = $form_state['triggering_element'];
  $selected_size = $triggering_element['#value'];
  $field_name = $triggering_element['#parents'][1];
  if ($selected_size == 'custom') {
    unset($form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_width']['#attributes']['disabled']);
    unset($form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_height']['#attributes']['disabled']);
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_width']['#value'] = '';
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_height']['#value'] = '';
  }
  elseif ($selected_size == 'optimal') {
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_width']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_height']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_width']['#value'] = '';
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_height']['#value'] = '';
  }
  else {
    $selected_size_array = explode('x', $selected_size);
    $width = $selected_size_array[0];
    $height = $selected_size_array[1];
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_width']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_height']['#attributes']['disabled'] = array('disabled' => 'disabled');
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_width']['#value'] = $width;
    $form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_height']['#value'] = $height;
  }
  $elements = array();
  $elements['popup_width'] = $form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_width'];
  $elements['popup_height'] = $form['fields'][$field_name]['format']['settings_edit_form']['settings']['popup_height'];

  return $elements;
}

/**
 * Form validation handler for formatter settings form.
 */
function ziggeo_field_formatter_settings_form_validate(&$element, &$form_state) {
  $field_name = $form_state['formatter_settings_edit'];
  if ($field_name != NULL && $form_state['values']['fields'][$field_name]['type'] == 'ziggeo_player') {
    $settings = $form_state['values']['fields'][$field_name]['settings_edit_form']['settings'];

    // Check match Size of the embedding and Video Recording resolution.
    $fields_to_validate = array(
      'embedding_size',
      'popup_size',
      'save_settings',
    );
    if ((isset($form_state['triggering_element']['#parents'][4]) &&
        in_array($form_state['triggering_element']['#parents'][4], $fields_to_validate)) ||
        (isset($form_state['triggering_element']['#parents'][0]) &&
        $form_state['triggering_element']['#parents'][0] == 'submit')) {
      if ($settings['embedding_size'] == 'custom') {
        unset($element['format']['settings_edit_form']['settings']['embedding_width']['#attributes']['disabled']);
        unset($element['format']['settings_edit_form']['settings']['embedding_height']['#attributes']['disabled']);
        $embedding_width = $settings['embedding_width'];
        $embedding_height = $settings['embedding_height'];
      }
      elseif ($settings['embedding_size'] == 'responsive') {
        $element['format']['settings_edit_form']['settings']['embedding_width']['#attributes']['disabled'] = array('disabled' => 'disabled');
        $element['format']['settings_edit_form']['settings']['embedding_height']['#attributes']['disabled'] = array('disabled' => 'disabled');
        $element['format']['settings_edit_form']['settings']['embedding_width']['#value'] = '';
        $element['format']['settings_edit_form']['settings']['embedding_height']['#value'] = '';
      }
      else {
        $element['format']['settings_edit_form']['settings']['embedding_width']['#attributes']['disabled'] = array('disabled' => 'disabled');
        $element['format']['settings_edit_form']['settings']['embedding_height']['#attributes']['disabled'] = array('disabled' => 'disabled');
        $selected_size_array = explode('x', $settings['embedding_size']);
        $embedding_width = $selected_size_array[0];
        $embedding_height = $selected_size_array[1];
        $element['format']['settings_edit_form']['settings']['embedding_width']['#value'] = $embedding_width;
        $element['format']['settings_edit_form']['settings']['embedding_height']['#value'] = $embedding_height;
      }

      if ($settings['popup_size'] == 'custom') {
        unset($element['format']['settings_edit_form']['settings']['popup_width']['#attributes']['disabled']);
        unset($element['format']['settings_edit_form']['settings']['popup_height']['#attributes']['disabled']);
      }
      elseif ($settings['popup_size'] == 'responsive') {
        $element['format']['settings_edit_form']['settings']['popup_width']['#attributes']['disabled'] = array('disabled' => 'disabled');
        $element['format']['settings_edit_form']['settings']['popup_height']['#attributes']['disabled'] = array('disabled' => 'disabled');
        $element['format']['settings_edit_form']['settings']['popup_width']['#value'] = '';
        $element['format']['settings_edit_form']['settings']['popup_height']['#value'] = '';
      }
      else {
        $element['format']['settings_edit_form']['settings']['popup_width']['#attributes']['disabled'] = array('disabled' => 'disabled');
        $element['format']['settings_edit_form']['settings']['popup_height']['#attributes']['disabled'] = array('disabled' => 'disabled');
        $selected_popup_array = explode('x', $settings['popup_size']);
        $popup_width = $selected_popup_array[0];
        $popup_height = $selected_popup_array[1];
        $element['format']['settings_edit_form']['settings']['popup_width']['#value'] = $popup_width;
        $element['format']['settings_edit_form']['settings']['popup_height']['#value'] = $popup_height;
      }

      $entity_type = $form_state['complete form']['#entity_type'];
      $bundle_name = $form_state['complete form']['#bundle'];
      $instances = field_info_instances($entity_type, $bundle_name);
      $widget_settings = $instances[$field_name]['widget']['settings'];
      if ($widget_settings['recording_resolution_fieldset']['video_resolution'] == 'custom') {
        $recording_width = $widget_settings['recording_resolution_fieldset']['recording_width'];
        $recording_height = $widget_settings['recording_resolution_fieldset']['recording_height'];
      }
      else {
        $selected_resolution_array = explode('x', $widget_settings['recording_resolution_fieldset']['video_resolution']);
        $recording_width = $selected_resolution_array[0];
        $recording_height = $selected_resolution_array[1];
      }

      if ((isset($form_state['triggering_element']['#parents'][0]) &&
          $form_state['triggering_element']['#parents'][0] == 'submit' &&
          $embedding_width != '' &&
          $embedding_height != '' &&
          $recording_width != '' &&
          $recording_height != '') ||
          (isset($form_state['triggering_element']['#parents'][4]) &&
          $form_state['triggering_element']['#parents'][4] == 'save_settings' &&
          $embedding_width != '' &&
          $embedding_height != '' &&
          $recording_width != '' &&
          $recording_height != '') &&
          $settings['embedding_size'] != 'responsive') {
        $embedding_ratio = round($embedding_width / $embedding_height, 5);
        $recording_ratio = round($recording_width / $recording_height, 5);
        if ($embedding_ratio <> $recording_ratio) {
          drupal_set_message(t('Ratio of the Embedding not match Video Recording ratio.'), 'warning');
        }
        if ($embedding_width > $recording_width ||
            $embedding_height > $recording_height) {
          drupal_set_message(t('Size of the embedding is larger than Video Recording resolution.'), 'warning');
        }
      }
    }

    // Check filling Width and Height.
    if ($settings['embedding_size'] == 'custom') {
      if ($settings['embedding_width'] == '') {
        form_set_error('fields][field_ziggeo][settings_edit_form][settings][embedding_width', t('Width field is required for custom size of the embedding.'));
      }
      if ($settings['embedding_height'] == '') {
        form_set_error('fields][field_ziggeo][settings_edit_form][settings][embedding_height', t('Height field is required for custom size of the embedding.'));
      }
    }
    if ($settings['open_in_popup'] == TRUE && $settings['popup_size'] == 'custom') {
      if ($settings['popup_width'] == '') {
        form_set_error('fields][field_ziggeo][settings_edit_form][settings][popup_width', t('Width field is required for custom size of the popup.'));
      }
      if ($settings['popup_height'] == '') {
        form_set_error('fields][field_ziggeo][settings_edit_form][settings][popup_height', t('Height field is required for custom size of the popup.'));
      }
    }
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ziggeo_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  switch ($display['type']) {
    case 'ziggeo_player':
      $embedding_size = $settings['embedding_size'];
      $form = NULL;
      $form_state = NULL;
      $formatter_settings_form = ziggeo_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
      $embedding_size_text = $formatter_settings_form['embedding_size']['#options'][$embedding_size];
      $custom_embedding_text = '';
      if ($embedding_size == 'custom') {
        $custom_embedding_text .= ' (' . $settings['embedding_width'] . 'x' . $settings['embedding_height'] . ')';
      }
      $summary[] = t('Size of embedding: @embedding_size_text', array('@embedding_size_text' => $embedding_size_text)) . $custom_embedding_text;

      if ($settings['open_in_popup'] == TRUE) {
        $popup_size = $settings['popup_size'];
        $popup_size_text = $formatter_settings_form['popup_size']['#options'][$popup_size];
        $custom_popup_text = '';
        if ($popup_size == 'custom') {
          $custom_popup_text .= ' (' . $settings['popup_width'] . 'x' . $settings['popup_height'] . ')';
        }
        $summary[] = t('Open in popup: @popup_size_text', array('@popup_size_text' => $popup_size_text)) . $custom_popup_text;
      }
      break;

    case 'ziggeo_image':
      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      // Unset possible 'No defined styles' option.
      unset($image_styles['']);
      // Styles could be lost because of enabled/disabled modules that defines
      // their styles in code.
      if (isset($image_styles[$settings['image_style']])) {
        $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
      }
      else {
        $summary[] = t('Original image');
      }
      break;
  }
  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function ziggeo_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $field_settings = $field['settings'];
  $formatter_settings = $display['settings'];

  switch ($display['type']) {
    case 'ziggeo_player':
      foreach ($items as $delta => $item) {
        $video_token = $item['token'];
        $element['#attached'] = ziggeo_libraries($field_settings['application_token']);
        $element['#attached']['css'][drupal_get_path('module', 'ziggeo') . '/ziggeo_formatter.css'] = array('weight' => 2);

        if ($formatter_settings['embedding_size'] == 'custom') {
          $embedding_width = $formatter_settings['embedding_width'];
          $embedding_height = $formatter_settings['embedding_height'];
        }
        elseif ($formatter_settings['embedding_size'] == 'responsive') {
          $embedding_width = '';
          $embedding_height = '';
        }
        else {
          $selected_size_array = explode('x', $formatter_settings['embedding_size']);
          $embedding_width = $selected_size_array[0];
          $embedding_height = $selected_size_array[1];
        }

        $element[$delta] = array(
          '#theme' => 'ziggeo_element',
          '#attributes' => array(
            'ziggeo-width' => $embedding_width,
            'ziggeo-height' => $embedding_height,
            'ziggeo-video' => $video_token,
          ),
        );

        if ($formatter_settings['open_in_popup'] == TRUE) {
          $element[$delta]['#attributes']['ziggeo-popup'] = '';
          if ($formatter_settings['popup_size'] == 'custom') {
            $element[$delta]['#attributes']['ziggeo-popup_width'] = $formatter_settings['popup_width'];
            $element[$delta]['#attributes']['ziggeo-popup_height'] = $formatter_settings['popup_height'];
          }
          elseif ($formatter_settings['popup_size'] == 'optimal') {
            // No attributes to add.
          }
          else {
            $selected_popup_array = explode('x', $formatter_settings['popup_size']);
            $element[$delta]['#attributes']['ziggeo-popup_width'] = $selected_popup_array[0];
            $element[$delta]['#attributes']['ziggeo-popup_height'] = $selected_popup_array[1];
          }
        }
      }
      break;

    case 'ziggeo_image':
      foreach ($items as $delta => $item) {
        $video_token = $item['token'];
        $image = 'http://embed.ziggeo.com/v1/applications/' . $field_settings['application_token'] . '/videos/' . $video_token . '/image';
        $file = system_retrieve_file($image, 'public://' . $video_token . '.jpg', TRUE, FILE_EXISTS_REPLACE);
        $file->status = 0;
        file_save($file);

        $element[$delta] = array(
          '#theme' => 'image_formatter',
          '#item' => (array) $file,
          '#image_style' => $formatter_settings['image_style'],
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_js_alter().
 */
function ziggeo_js_alter(&$javascript) {
  // Delete duplicate inline js that was added in fields.
  $javascript_data_column = array_filter(array_combine(array_keys($javascript), array_column($javascript, 'data')));
  $javascript_string_data_column = array_filter($javascript_data_column, function ($data_value) {
    return !is_array($data_value);
  });
  $javascript_not_string_data_column = array_diff_key($javascript, $javascript_string_data_column);
  $javascript_unique_data_column = array_unique($javascript_string_data_column);
  $javascript_data_column_duplicates_to_delete = array_diff_key(array_diff_key($javascript, $javascript_unique_data_column), $javascript_not_string_data_column);
  $javascript = array_diff_key($javascript, $javascript_data_column_duplicates_to_delete);
}

/**
 * Theming Ziggeo Field.
 */

/**
 * Implements hook_theme().
 */
function ziggeo_theme($existing, $type, $theme, $path) {
  return array(
    'ziggeo_element' => array(
      'render element' => 'ziggeo_element',
    ),
    'ziggeo_remove_button' => array(
      'render element' => 'ziggeo_remove_button',
    ),
  );
}

/**
 * Returns HTML for an embed Ziggeo element.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the embed Ziggeo element:
 *     - #attributes: Parameters to customize the functionality and behavior of
 *       embedding.
 *     - #is_default: Whether or not the value is the default value of field.
 *     - #remove_button_caption: Remove button caption.
 *
 * @ingroup themeable
 */
function theme_ziggeo_element(array $variables) {
  $output = '';
  if (isset($variables['ziggeo_element']['#is_default']) &&
      $variables['ziggeo_element']['#is_default'] &&
      isset($variables['ziggeo_element']['#attributes']['ziggeo-video']) &&
      $variables['ziggeo_element']['#attributes']['ziggeo-video'] != '') {
    $output .= '<div class="description">';
    $output .= t('This is default video. For change press @remove_button_caption button.', array('@remove_button_caption' => $variables['ziggeo_element']['#remove_button_caption']));
    $output .= '</div>';
  }
  $output .= '<ziggeo';
  $attributes = $variables['ziggeo_element']['#attributes'];
  foreach ($attributes as $name => $value) {
    $output .= ' ' . $name . '="' . $value . '"';
  }
  $output .= '>';
  $output .= '</ziggeo>';
  return $output;
}

/**
 * Returns HTML for a remove button.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the remove button:
 *     - #attributes: Attributes of HTML element.
 *     - #value: Remove button caption.
 *
 * @ingroup themeable
 */
function theme_ziggeo_remove_button(array $variables) {
  $output = '';
  $output .= '<input';
  $output .= ' type="button"';
  $output .= ' value="' . $variables['ziggeo_remove_button']['#value'] . '"';
  $attributes = $variables['ziggeo_remove_button']['#attributes'];
  foreach ($attributes as $name => $value) {
    $output .= ' ' . $name . '="' . implode(' ', $value) . '"';
  }
  $output .= ' />';
  return $output;
}

/**
 * ZiggeoPhpSdk library.
 */

/**
 * Implements hook_libraries_info().
 */
function ziggeo_libraries_info() {
  $libraries['ZiggeoPhpSdk'] = array(
    'name' => 'Ziggeo PHP Server SDK',
    'vendor url' => 'https://ziggeo.com/docs/sdks/server-side/php',
    'download url' => 'https://github.com/Ziggeo/ZiggeoPhpSdk/archive/master.zip',
    'version arguments' => array(
      'file' => 'composer.json',
      'pattern' => '/"version": "([0-9a-zA-Z.-]+)"/',
    ),
    'files' => array(
      'php' => array(
        'Ziggeo.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_modules_enabled().
 */
function ziggeo_modules_enabled($modules) {
  if (in_array('ziggeo', $modules)) {
    ziggeo_check_requirements();
  }
}

/**
 * Local functions.
 */

/**
 * Get Ziggeo libraries as attached array.
 *
 * This function returns #attached property for embed Ziggeo element to provide
 * it functionality.
 *
 * @param string $application_token
 *   Token of Ziggeo application, from field settings.
 * @param string $language
 *   (optional) Language (langcode) for recording instructions of Ziggeo
 *   element.
 *
 * @return array
 *   An associative array for #attached property of element where the keys are
 *   the attachment types and the values are the attached data.
 */
function ziggeo_libraries($application_token, $language = NULL) {
  ziggeo_check_requirements();
  $attached_array = array(
    'css' => array(
      '//assets-cdn.ziggeo.com/v1-stable/ziggeo.css' => array('type' => 'external', 'weight' => 1),
    ),
    'js' => array(
      '//assets-cdn.ziggeo.com/v1-stable/ziggeo.js' => array('type' => 'external', 'weight' => 1),
      array(
        'data' => 'ZiggeoApi.token = "' . $application_token . '";',
        'type' => 'inline',
        'weight' => 2,
      ),
    ),
  );
  if ($language) {
    $attached_array['js'][] = array(
      'data' => 'ZiggeoApi.language  = "' . $language . '";',
      'type' => 'inline',
      'weight' => 3,
    );
  }

  return $attached_array;
}

/**
 * Provide mapping Drupal and Ziggeo langcodes.
 *
 * @param string $drupal_language
 *   Drupal langcode.
 *
 * @return string
 *   Ziggeo langcode.
 */
function ziggeo_drupal_language_map($drupal_language) {
  switch ($drupal_language) {
    case 'ca':
      $ziggeo_language = 'cat';
      break;

    case 'nb':
    case 'nn':
      $ziggeo_language = 'no';
      break;

    case 'pt':
    case 'pt-pt':
      $ziggeo_language = 'pt-br';
      break;

    default:
      $ziggeo_language = $drupal_language;
      break;
  }

  return $ziggeo_language;
}

/**
 * Function for calc count of items in unlimfield field.
 *
 * @param array $field
 *   Field items.
 *
 * @return int
 *   Count of items.
 */
function ziggeo_calc_unlimfield_count(array $field) {
  $count = 0;
  foreach ($field as $item) {
    if (isset($item['#field_name'])) {
      $count++;
    }
  }

  return $count;
}

/**
 * Includes ZiggeoPhpSdk and returns Ziggeo object for the field.
 *
 * @param string $field_name
 *   Name of Ziggeo field.
 *
 * @return object
 *   Object of class Ziggeo.
 */
function ziggeo_get_ziggeo_object($field_name) {
  $field_info = field_info_field($field_name);
  $application_token = $field_info['settings']['application_token'];
  $private_key = $field_info['settings']['private_key'];
  $encryption_key = $field_info['settings']['encryption_key'];
  $requirements = ziggeo_get_requirements();
  if ($requirements['ZiggeoPhpSdk']['severity'] != 2) {
    libraries_load('ZiggeoPhpSdk');
  }
  else {
    drupal_set_message($requirements['ZiggeoPhpSdk']['description'], 'warning');
    return new stdClass();
  }

  return new Ziggeo($application_token, $private_key, $encryption_key);
}

/**
 * Get a revision id list for a particular entity.
 *
 * @param string $entity_type
 *   The entity type, e.g., node.
 * @param object $entity
 *   The entity object.
 *
 * @return array
 *   Array of revisions id.
 */
function ziggeo_get_entity_revision_list($entity_type, $entity) {
  $info = entity_get_info($entity_type);
  if (!isset($info['revision table'])) {
    // If this entity does not track revisions then return FALSE.
    return array();
  }
  if (!isset($info['entity keys']['revision'])) {
    // If for whatever reason a revision table was defined, but no revision key
    // then also return FALSE.
    return array();
  }
  $revisions = db_select($info['revision table'], 'r')
    ->fields('r', array($info['entity keys']['revision']))
    ->condition($info['entity keys']['id'], $entity->{$info['entity keys']['id']})
    ->execute()
    ->fetchAllAssoc($info['entity keys']['revision']);

  return $revisions;
}

/**
 * Check is there contained video in other revisions.
 *
 * @param string $entity_type
 *   The type of $entity.
 * @param object $entity
 *   The entity object.
 * @param object $field
 *   The field structure.
 * @param string $langcode
 *   The language associated with field items.
 * @param string $field_item_token
 *   The video token for check.
 *
 * @return bool
 *   Contained or not the video token in others revisions.
 */
function ziggeo_field_is_contained_item_in_revisions($entity_type, $entity, $field, $langcode, $field_item_token) {
  $revision_list = ziggeo_get_entity_revision_list($entity_type, $entity);
  $revision_key = entity_get_info($entity_type)['entity keys']['revision'];
  if ($revision_key &&
      isset($entity->$revision_key) &&
      isset($revision_list[$entity->$revision_key])) {
    unset($revision_list[$entity->$revision_key]);
  }
  $is_contained_item_in_revisions = FALSE;
  foreach ($revision_list as $revision_vid => $revision) {
    $revision_object = entity_load($entity_type, array(), array($revision_key => $revision_vid));
    $revision_object = reset($revision_object);
    $revision_items = $revision_object->$field['field_name'];
    if (isset($revision_items[$langcode])) {
      foreach ($revision_items[$langcode] as $revision_item) {
        if ($revision_item['token'] == $field_item_token) {
          $is_contained_item_in_revisions = TRUE;
        }
      }
    }
  }

  return $is_contained_item_in_revisions;
}

/**
 * Check is there contained video in other translations.
 *
 * @param string $entity_type
 *   The type of $entity.
 * @param object $entity
 *   The entity object.
 * @param object $field
 *   The field structure.
 * @param string $langcode
 *   The language associated with field items.
 * @param string $field_item_token
 *   The video token for check.
 *
 * @return bool
 *   Contained or not the video token in others translations.
 */
function ziggeo_field_is_contained_item_in_translations($entity_type, $entity, $field, $langcode, $field_item_token) {
  $field_languages = field_available_languages($entity_type, $field);
  unset($field_languages[array_search($langcode, $field_languages)]);
  $field_name = $field['field_name'];
  $is_contained_item_in_languages = FALSE;
  foreach ($field_languages as $field_language) {
    $field_language_items = field_get_items($entity_type, $entity, $field_name, $field_language);
    foreach ($field_language_items as $field_language_item) {
      if ($field_language_item['token'] == $field_item_token) {
        $is_contained_item_in_languages = TRUE;
      }
    }
  }
  $is_new_entity_of_translation = !isset($entity->original) && isset($entity->translation_source);
  if ($is_new_entity_of_translation && !empty($entity->translation_source->$field_name)) {
    $old_items_field = $entity->translation_source->$field_name;
    $old_items = array_column($old_items_field[$langcode], 'token');
    if (in_array($field_item_token, $old_items)) {
      $is_contained_item_in_languages = TRUE;
    }
  }

  return $is_contained_item_in_languages;
}

/**
 * Check video is default field value.
 *
 * @param string $entity_type
 *   The type of $entity.
 * @param object $entity
 *   The entity object.
 * @param object $field
 *   The field structure.
 * @param object $instance
 *   The field instance.
 * @param string $langcode
 *   The language associated with field items.
 * @param string $field_item_token
 *   The video token for check.
 *
 * @return bool
 *   Whether or not the video token is default field value.
 */
function ziggeo_field_is_contained_item_in_default($entity_type, $entity, $field, $instance, $langcode, $field_item_token) {
  $field_default_value = field_get_default_value($entity_type, $entity, $field, $instance, $langcode);
  if (!empty($field_default_value) &&
      $field_default_value['0']['token'] == $field_item_token) {
    $is_default_value = TRUE;
  }
  else {
    $is_default_value = FALSE;
  }

  return $is_default_value;
}

/**
 * Remove "temporary" attribute (expiration_days = 0) from video.
 *
 * @param object $ziggeo
 *   The Object of class Ziggeo.
 * @param string $video_token
 *   The token of video for operation.
 */
function ziggeo_remove_temporary_attribute($ziggeo, $video_token) {
  $arguments = array('expiration_days' => 0);
  try {
    if (method_exists($ziggeo, 'videos')) {
      $ziggeo->videos()->update($video_token, $arguments);
    }
    else {
      throw new Exception('ZiggeoPhpSdk not available.');
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('Error when update the video "@video_token" on ziggeo.com: @error_message', array('@video_token' => $video_token, '@error_message' => $e->getMessage())), 'warning');
  }
}

/**
 * Duplicates the video on ziggeo server.
 *
 * @param object $ziggeo
 *   The Object of class Ziggeo.
 * @param string $video_token
 *   The token of video which will be duplicated.
 *
 * @return string
 *   The token of new duplicated video.
 */
function ziggeo_duplicate_server_video($ziggeo, $video_token) {
  $duplicate_video_token = NULL;
  try {
    if (method_exists($ziggeo, 'videos')) {
      $video_file_copy = $ziggeo->videos()->download_video($video_token);
      $temp_name = drupal_tempnam(file_directory_temp(), 'ziggeo');
      file_put_contents($temp_name, $video_file_copy);
      $arguments = array('file' => $temp_name);
      $create_video_response = $ziggeo->videos()->create($arguments);
      unlink($temp_name);
      $duplicate_video_token = $create_video_response->token;
    }
    else {
      throw new Exception('ZiggeoPhpSdk not available.');
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('Error when copy the video "@video_token" on ziggeo.com: @error_message', array('@video_token' => $video_token, '@error_message' => $e->getMessage())), 'warning');
  }

  return $duplicate_video_token;
}

/**
 * Delete video on ziggeo server.
 *
 * @param object $ziggeo
 *   The Object of class Ziggeo.
 * @param string $video_token
 *   The token of video which will be deleted.
 */
function ziggeo_delete_server_video($ziggeo, $video_token) {
  try {
    if (method_exists($ziggeo, 'videos')) {
      $ziggeo->videos()->delete($video_token);
    }
    else {
      throw new Exception('ZiggeoPhpSdk not available.');
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('Error when delete the video "@video_token" on ziggeo.com: @error_message', array('@video_token' => $video_token, '@error_message' => $e->getMessage())), 'warning');
  }
}

/**
 * Get requirements of ziggeo module.
 *
 * @return array
 *   An associative array for hook_requirements().
 */
function ziggeo_get_requirements() {
  $requirements = array();
  $t = get_t();
  $library = libraries_detect('ZiggeoPhpSdk');
  $error_message = isset($library['error message']) ? $library['error message'] : '';

  if (empty($library['installed'])) {
    $ziggeo_php_sdk_link = l($t('Ziggeo PHP Server SDK'), $library['download url']);
    $requirements['ZiggeoPhpSdk'] = array(
      'title' => $t('Ziggeo PHP Server SDK'),
      'severity' => 2,
      'description' => $t('@error You need to download !ZiggeoPhpSdk, extract the archive and place files in the %path directory on your server. Make sure the path to the Ziggeo.php file becomes: "sites/all/libraries/ZiggeoPhpSdk/Ziggeo.php".', array(
        '@error' => $error_message,
        '!ZiggeoPhpSdk' => $ziggeo_php_sdk_link,
        '%path' => 'sites/all/libraries/ZiggeoPhpSdk',
      )),
    );
  }
  else {
    $requirements['ZiggeoPhpSdk'] = array(
      'title' => $t('Ziggeo PHP Server SDK'),
      'severity' => 0,
      'value' => $library['version'],
    );
  }

  return $requirements;
}

/**
 * Check requirements of ziggeo module. Displays warning message if not fit.
 */
function ziggeo_check_requirements() {
  $requirements = ziggeo_get_requirements();
  if ($requirements['ZiggeoPhpSdk']['severity'] == 2) {
    drupal_set_message($requirements['ZiggeoPhpSdk']['description'], 'warning');
  }
}
