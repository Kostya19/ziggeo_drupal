<?php

/**
 * @file
 * Provides a Ziggeo field type.
 *
 * Provides a Ziggeo field type that allows you record and playback videos using
 * Ziggeo Video API.
 */

// Load all Field module hooks for defining Ziggeo Field Type.
module_load_include('inc', 'ziggeo', 'ziggeo.field');

/**
 * Implements hook_help().
 */
function ziggeo_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ziggeo':
      // Return a line-break version of the module README.txt.
      return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * Implements hook_js_alter().
 */
function ziggeo_js_alter(&$javascript) {
  // Delete duplicate inline js that was added in fields.
  $javascript_data_column = array_filter(array_combine(array_keys($javascript), array_column($javascript, 'data')));
  $javascript_string_data_column = array_filter($javascript_data_column, function ($data_value) {
    return !is_array($data_value);
  });
  $javascript_not_string_data_column = array_diff_key($javascript, $javascript_string_data_column);
  $javascript_unique_data_column = array_unique($javascript_string_data_column);
  $javascript_data_column_duplicates_to_delete = array_diff_key(array_diff_key($javascript, $javascript_unique_data_column), $javascript_not_string_data_column);
  $javascript = array_diff_key($javascript, $javascript_data_column_duplicates_to_delete);
}

/**
 * Theming Ziggeo Field.
 */

/**
 * Implements hook_theme().
 */
function ziggeo_theme($existing, $type, $theme, $path) {
  return array(
    'ziggeo_element' => array(
      'render element' => 'ziggeo_element',
    ),
    'ziggeo_remove_button' => array(
      'render element' => 'ziggeo_remove_button',
    ),
  );
}

/**
 * Returns HTML for an embed Ziggeo element.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the embed Ziggeo element:
 *     - #attributes: Parameters to customize the functionality and behavior of
 *       embedding.
 *     - #is_default: Whether or not the value is the default value of field.
 *     - #remove_button_caption: Remove button caption.
 *
 * @ingroup themeable
 */
function theme_ziggeo_element(array $variables) {
  $output = '';
  // If the widget contains a default field video, then display a warning about
  // it, so that the user uses the remove button to change it instead re-record,
  // because if he re-records the video, the default field video will change.
  if (isset($variables['ziggeo_element']['#is_default']) &&
      $variables['ziggeo_element']['#is_default'] &&
      isset($variables['ziggeo_element']['#attributes']['ziggeo-video']) &&
      $variables['ziggeo_element']['#attributes']['ziggeo-video'] != '') {
    $output .= '<div class="description">';
    $output .= t('This is default video. For change press @remove_button_caption button.', array('@remove_button_caption' => $variables['ziggeo_element']['#remove_button_caption']));
    $output .= '</div>';
  }
  $output .= '<ziggeo';
  $attributes = $variables['ziggeo_element']['#attributes'];
  foreach ($attributes as $name => $value) {
    $output .= ' ' . $name . '="' . check_plain($value) . '"';
  }
  $output .= '>';
  $output .= '</ziggeo>';
  return $output;
}

/**
 * Returns HTML for a remove button.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the remove button:
 *     - #attributes: Attributes of HTML element.
 *     - #value: Remove button caption.
 *
 * @ingroup themeable
 */
function theme_ziggeo_remove_button(array $variables) {
  $output = '';
  $output .= '<input';
  $output .= ' type="button"';
  $output .= ' value="' . $variables['ziggeo_remove_button']['#value'] . '"';
  $attributes = $variables['ziggeo_remove_button']['#attributes'];
  foreach ($attributes as $name => $value) {
    $output .= ' ' . $name . '="' . implode(' ', $value) . '"';
  }
  $output .= ' />';
  return $output;
}

/**
 * ZiggeoPhpSdk library.
 */

/**
 * Implements hook_libraries_info().
 */
function ziggeo_libraries_info() {
  $libraries['ZiggeoPhpSdk'] = array(
    'name' => 'Ziggeo PHP Server SDK',
    'vendor url' => 'https://ziggeo.com/docs/sdks/server-side/php',
    'download url' => 'https://github.com/Ziggeo/ZiggeoPhpSdk/archive/master.zip',
    'version arguments' => array(
      'file' => 'composer.json',
      'pattern' => '/"version": "([0-9a-zA-Z.-]+)"/',
    ),
    'files' => array(
      'php' => array(
        'Ziggeo.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_modules_enabled().
 */
function ziggeo_modules_enabled($modules) {
  if (in_array('ziggeo', $modules)) {
    ziggeo_check_requirements();
  }
}

/**
 * Local functions.
 */

/**
 * Get Ziggeo libraries as attached array.
 *
 * This function returns #attached property for embed Ziggeo element to provide
 * it functionality.
 *
 * @param string $application_token
 *   Token of Ziggeo application, from field settings.
 * @param string $language
 *   (optional) Language (langcode) for recording instructions of Ziggeo
 *   element.
 *
 * @return array
 *   An associative array for #attached property of element where the keys are
 *   the attachment types and the values are the attached data.
 */
function ziggeo_libraries($application_token, $language = NULL) {
  ziggeo_check_requirements();
  $application_token = check_plain($application_token);
  $attached_array = array(
    'css' => array(
      '//assets-cdn.ziggeo.com/v1-stable/ziggeo.css' => array('type' => 'external', 'weight' => 1),
    ),
    'js' => array(
      '//assets-cdn.ziggeo.com/v1-stable/ziggeo.js' => array('type' => 'external', 'weight' => 1),
      array(
        'data' => 'ZiggeoApi.token = "' . $application_token . '";',
        'type' => 'inline',
        'weight' => 2,
      ),
    ),
  );
  if ($language) {
    $attached_array['js'][] = array(
      'data' => 'ZiggeoApi.language  = "' . $language . '";',
      'type' => 'inline',
      'weight' => 3,
    );
  }

  return $attached_array;
}

/**
 * Provide mapping Drupal and Ziggeo langcodes.
 *
 * @param string $drupal_language
 *   Drupal langcode.
 *
 * @return string
 *   Ziggeo langcode.
 */
function ziggeo_drupal_language_map($drupal_language) {
  switch ($drupal_language) {
    case 'ca':
      $ziggeo_language = 'cat';
      break;

    case 'nb':
    case 'nn':
      $ziggeo_language = 'no';
      break;

    case 'pt':
    case 'pt-pt':
      $ziggeo_language = 'pt-br';
      break;

    default:
      $ziggeo_language = $drupal_language;
      break;
  }

  return $ziggeo_language;
}

/**
 * Function for calc count of items in unlimfield field.
 *
 * @param array $field
 *   Field items.
 *
 * @return int
 *   Count of items.
 */
function ziggeo_calc_unlimfield_count(array $field) {
  $count = 0;
  foreach ($field as $item) {
    if (isset($item['#field_name'])) {
      $count++;
    }
  }

  return $count;
}

/**
 * Includes ZiggeoPhpSdk and returns Ziggeo object for the field.
 *
 * @param string $field_name
 *   Name of Ziggeo field.
 *
 * @return object
 *   Object of class Ziggeo.
 */
function ziggeo_get_ziggeo_object($field_name) {
  $field_info = field_info_field($field_name);
  $application_token = $field_info['settings']['application_token'];
  $private_key = $field_info['settings']['private_key'];
  $encryption_key = $field_info['settings']['encryption_key'];
  $requirements = ziggeo_get_requirements();
  if ($requirements['ZiggeoPhpSdk']['severity'] != 2) {
    libraries_load('ZiggeoPhpSdk');
  }
  else {
    drupal_set_message($requirements['ZiggeoPhpSdk']['description'], 'warning');
    return new stdClass();
  }

  return new Ziggeo($application_token, $private_key, $encryption_key);
}

/**
 * Get a revision id list for a particular entity.
 *
 * @param string $entity_type
 *   The entity type, e.g., node.
 * @param object $entity
 *   The entity object.
 *
 * @return array
 *   Array of revisions id.
 */
function ziggeo_get_entity_revision_list($entity_type, $entity) {
  $info = entity_get_info($entity_type);
  if (!isset($info['revision table'])) {
    // If this entity does not track revisions then return FALSE.
    return array();
  }
  if (!isset($info['entity keys']['revision'])) {
    // If for whatever reason a revision table was defined, but no revision key
    // then also return FALSE.
    return array();
  }
  $revisions = db_select($info['revision table'], 'r')
    ->fields('r', array($info['entity keys']['revision']))
    ->condition($info['entity keys']['id'], $entity->{$info['entity keys']['id']})
    ->execute()
    ->fetchAllAssoc($info['entity keys']['revision']);

  return $revisions;
}

/**
 * Check is there contained video in other revisions.
 *
 * @param string $entity_type
 *   The type of $entity.
 * @param object $entity
 *   The entity object.
 * @param object $field
 *   The field structure.
 * @param string $langcode
 *   The language associated with field items.
 * @param string $field_item_token
 *   The video token for check.
 *
 * @return bool
 *   Contained or not the video token in others revisions.
 */
function ziggeo_field_is_contained_item_in_revisions($entity_type, $entity, $field, $langcode, $field_item_token) {
  $revision_list = ziggeo_get_entity_revision_list($entity_type, $entity);
  $revision_key = entity_get_info($entity_type)['entity keys']['revision'];
  if ($revision_key &&
      isset($entity->$revision_key) &&
      isset($revision_list[$entity->$revision_key])) {
    unset($revision_list[$entity->$revision_key]);
  }
  $is_contained_item_in_revisions = FALSE;
  foreach ($revision_list as $revision_vid => $revision) {
    $revision_object = entity_load($entity_type, array(), array($revision_key => $revision_vid));
    $revision_object = reset($revision_object);
    $revision_items = $revision_object->$field['field_name'];
    if (isset($revision_items[$langcode])) {
      foreach ($revision_items[$langcode] as $revision_item) {
        if ($revision_item['token'] == $field_item_token) {
          $is_contained_item_in_revisions = TRUE;
        }
      }
    }
  }

  return $is_contained_item_in_revisions;
}

/**
 * Check is there contained video in other translations.
 *
 * @param string $entity_type
 *   The type of $entity.
 * @param object $entity
 *   The entity object.
 * @param object $field
 *   The field structure.
 * @param string $langcode
 *   The language associated with field items.
 * @param string $field_item_token
 *   The video token for check.
 *
 * @return bool
 *   Contained or not the video token in others translations.
 */
function ziggeo_field_is_contained_item_in_translations($entity_type, $entity, $field, $langcode, $field_item_token) {
  $field_languages = field_available_languages($entity_type, $field);
  unset($field_languages[array_search($langcode, $field_languages)]);
  $field_name = $field['field_name'];
  $is_contained_item_in_languages = FALSE;
  foreach ($field_languages as $field_language) {
    $field_language_items = field_get_items($entity_type, $entity, $field_name, $field_language);
    foreach ($field_language_items as $field_language_item) {
      if ($field_language_item['token'] == $field_item_token) {
        $is_contained_item_in_languages = TRUE;
      }
    }
  }
  $is_new_entity_of_translation = !isset($entity->original) && isset($entity->translation_source);
  if ($is_new_entity_of_translation && !empty($entity->translation_source->$field_name)) {
    $old_items_field = $entity->translation_source->$field_name;
    $old_items = array_column($old_items_field[$langcode], 'token');
    if (in_array($field_item_token, $old_items)) {
      $is_contained_item_in_languages = TRUE;
    }
  }

  return $is_contained_item_in_languages;
}

/**
 * Check video is default field value.
 *
 * @param string $entity_type
 *   The type of $entity.
 * @param object $entity
 *   The entity object.
 * @param object $field
 *   The field structure.
 * @param object $instance
 *   The field instance.
 * @param string $langcode
 *   The language associated with field items.
 * @param string $field_item_token
 *   The video token for check.
 *
 * @return bool
 *   Whether or not the video token is default field value.
 */
function ziggeo_field_is_contained_item_in_default($entity_type, $entity, $field, $instance, $langcode, $field_item_token) {
  $field_default_value = field_get_default_value($entity_type, $entity, $field, $instance, $langcode);
  if (!empty($field_default_value) &&
      $field_default_value['0']['token'] == $field_item_token) {
    $is_default_value = TRUE;
  }
  else {
    $is_default_value = FALSE;
  }

  return $is_default_value;
}

/**
 * Remove "temporary" attribute (expiration_days = 0) from video.
 *
 * @param object $ziggeo
 *   The Object of class Ziggeo.
 * @param string $video_token
 *   The token of video for operation.
 */
function ziggeo_remove_temporary_attribute($ziggeo, $video_token) {
  $arguments = array('expiration_days' => 0);
  try {
    if (method_exists($ziggeo, 'videos')) {
      $ziggeo->videos()->update($video_token, $arguments);
    }
    else {
      throw new Exception('ZiggeoPhpSdk not available.');
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('Error when update the video "@video_token" on ziggeo.com: @error_message', array('@video_token' => $video_token, '@error_message' => $e->getMessage())), 'warning');
  }
}

/**
 * Duplicates the video on ziggeo server.
 *
 * @param object $ziggeo
 *   The Object of class Ziggeo.
 * @param string $video_token
 *   The token of video which will be duplicated.
 *
 * @return string
 *   The token of new duplicated video.
 */
function ziggeo_duplicate_server_video($ziggeo, $video_token) {
  $duplicate_video_token = NULL;
  try {
    if (method_exists($ziggeo, 'videos')) {
      $video_file_copy = $ziggeo->videos()->download_video($video_token);
      $temp_name = drupal_tempnam(file_directory_temp(), 'ziggeo');
      file_put_contents($temp_name, $video_file_copy);
      $arguments = array('file' => $temp_name);
      $create_video_response = $ziggeo->videos()->create($arguments);
      unlink($temp_name);
      $duplicate_video_token = $create_video_response->token;
    }
    else {
      throw new Exception('ZiggeoPhpSdk not available.');
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('Error when copy the video "@video_token" on ziggeo.com: @error_message', array('@video_token' => $video_token, '@error_message' => $e->getMessage())), 'warning');
  }

  return $duplicate_video_token;
}

/**
 * Delete video on ziggeo server.
 *
 * @param object $ziggeo
 *   The Object of class Ziggeo.
 * @param string $video_token
 *   The token of video which will be deleted.
 */
function ziggeo_delete_server_video($ziggeo, $video_token) {
  try {
    if (method_exists($ziggeo, 'videos')) {
      $ziggeo->videos()->delete($video_token);
    }
    else {
      throw new Exception('ZiggeoPhpSdk not available.');
    }
  }
  catch (Exception $e) {
    drupal_set_message(t('Error when delete the video "@video_token" on ziggeo.com: @error_message', array('@video_token' => $video_token, '@error_message' => $e->getMessage())), 'warning');
  }
}

/**
 * Get requirements of ziggeo module.
 *
 * @return array
 *   An associative array for hook_requirements().
 */
function ziggeo_get_requirements() {
  $requirements = array();
  $t = get_t();
  $library = libraries_detect('ZiggeoPhpSdk');
  $error_message = isset($library['error message']) ? $library['error message'] : '';

  if (empty($library['installed'])) {
    $ziggeo_php_sdk_link = l($t('Ziggeo PHP Server SDK'), $library['download url']);
    $requirements['ZiggeoPhpSdk'] = array(
      'title' => $t('Ziggeo PHP Server SDK'),
      'severity' => 2,
      'description' => $t('@error You need to download !ZiggeoPhpSdk, extract the archive and place files in the %path directory on your server. Make sure the path to the Ziggeo.php file becomes: "sites/all/libraries/ZiggeoPhpSdk/Ziggeo.php".', array(
        '@error' => $error_message,
        '!ZiggeoPhpSdk' => $ziggeo_php_sdk_link,
        '%path' => 'sites/all/libraries/ZiggeoPhpSdk',
      )),
    );
  }
  else {
    $requirements['ZiggeoPhpSdk'] = array(
      'title' => $t('Ziggeo PHP Server SDK'),
      'severity' => 0,
      'value' => $library['version'],
    );
  }

  return $requirements;
}

/**
 * Check requirements of ziggeo module. Displays warning message if not fit.
 */
function ziggeo_check_requirements() {
  $requirements = ziggeo_get_requirements();
  if ($requirements['ZiggeoPhpSdk']['severity'] == 2) {
    drupal_set_message($requirements['ZiggeoPhpSdk']['description'], 'warning');
  }
}
